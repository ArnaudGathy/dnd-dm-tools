generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArmorType {
  LIGHT
  MEDIUM
  HEAVY
  SHIELD
}

model Armor {
  id                  Int       @id @default(autoincrement())
  character           Character @relation(fields: [characterId], references: [id])
  characterId         Int
  name                String
  type                ArmorType
  isProficient        Boolean   @default(true)
  AC                  Int
  extraEffects        String?
  strengthRequirement Int?
  stealthDisadvantage Boolean   @default(false)
  isEquipped          Boolean   @default(false)
}

enum CampaignId {
  DRAGONS
  PHANDELVER
  TOMB
}

enum CampaignStatus {
  ABANDONED
  ACTIVE
  FINISHED
}

model Campaign {
  id        Int            @id @default(autoincrement())
  name      CampaignId
  status    CampaignStatus @default(ACTIVE)
  character Character[]
  party     Party          @relation(fields: [partyId], references: [id])
  partyId   Int

  @@unique([name, partyId])
}

model Capacity {
  id          Int       @id @default(autoincrement())
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  name        String
  description String?
}

enum Classes {
  ARTIFICER
  BARBARIAN
  BARD
  CLERIC
  DRUID
  FIGHTER
  MONK
  PALADIN
  RANGER
  ROGUE
  SORCERER
  WARLOCK
  WIZARD
}

enum Subclasses {
  // Artificer
  ALCHEMIST
  ARMORER
  ARTILLERIST
  BATTLE_SMITH
  // Barbarian
  PATH_OF_THE_BERSERKER
  PATH_OF_THE_WILD_HEART
  PATH_OF_THE_ZEALOT
  PATH_OF_THE_WORLD_TREE
  // Bard
  COLLEGE_OF_DANCE
  COLLEGE_OF_LORE
  COLLEGE_OF_VALOR
  COLLEGE_OF_GLAMOUR
  // Cleric
  LIFE_DOMAIN
  LIGHT_DOMAIN
  WAR_DOMAIN
  TRICKERY_DOMAIN
  // Druid
  CIRCLE_OF_THE_LAND
  CIRCLE_OF_THE_MOON
  CIRCLE_OF_THE_SEA
  CIRCLE_OF_THE_STARS
  // Fighter
  BATTLE_MASTER
  CHAMPION
  ELDRITCH_KNIGHT
  PSI_WARRIOR
  // Monk
  WAY_OF_THE_OPEN_HAND
  WAY_OF_SHADOW
  WAY_OF_THE_ELEMENTS
  WAY_OF_MERCY
  // Paladin
  OATH_OF_DEVOTION
  OATH_OF_GLORY
  OATH_OF_THE_ANCIENTS
  OATH_OF_VENGEANCE
  // Ranger
  HUNTER
  BEAST_MASTER
  GLOOM_STALKER
  FEY_WANDERER
  // Rogue
  THIEF
  ASSASSIN
  ARCANE_TRICKSTER
  SOULKNIFE
  // Sorcerer
  DRACONIC
  WILD_MAGIC
  ABERRANT
  CLOCKWORK
  // Warlock
  THE_ARCHFEY
  THE_FIEND
  THE_GREAT_OLD_ONE
  THE_CELESTIAL
  // Wizard
  SCHOOL_OF_EVOCATION
  SCHOOL_OF_ABJURATION
  SCHOOL_OF_ILLUSION
  SCHOOL_OF_DIVINATION
}

enum Races {
  AASIMAR
  DRAGONBORN
  DWARF
  ELF
  GNOME
  GOLIATH
  HALFLING
  HUMAN
  ORC
  TABAXI
  TIEFLING
}

enum Backgrounds {
  ACOLYTE
  ANTHROPOLOGIST
  ARCHEOLOGIST
  ARTISAN
  CHARLATAN
  CRIMINAL
  ENTERTAINER
  FARMER
  GUARD
  GUIDE
  HERMIT
  MERCHANT
  NOBLE
  SAGE
  SAILOR
  SCRIBE
  SOLDIER
  WAYFARER
}

enum CharacterStatus {
  BACKUP
  ACTIVE
  DEAD
  RETIRED
}

enum Alignment {
  LAWFUL_GOOD
  NEUTRAL_GOOD
  CHAOTIC_GOOD
  LAWFUL_NEUTRAL
  NEUTRAL
  CHAOTIC_NEUTRAL
  LAWFUL_EVIL
  NEUTRAL_EVIL
  CHAOTIC_EVIL
}

model Character {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  status             CharacterStatus      @default(ACTIVE)
  owner              String
  campaign           Campaign             @relation(fields: [campaignId], references: [id])
  campaignId         Int
  spellsOnCharacters SpellsOnCharacters[]
  spellVersion       SpellVersion         @default(V2014)
  creatures          Int[]                @default([])

  name         String      @db.VarChar(255)
  level        Int         @default(1)
  className    Classes
  subclassName Subclasses?
  race         Races
  background   Backgrounds
  inspiration  Int         @default(0)
  maximumHP    Int
  currentHP    Int

  strength     Int
  dexterity    Int
  constitution Int
  intelligence Int
  wisdom       Int
  charisma     Int

  savingThrows  SavingThrow[]
  skills        Skill[]
  proficiencies String[]      @db.VarChar(255)
  capacities    Capacity[]

  initiativeBonus    Int @default(0)
  ACBonus            Int @default(0)
  magicAttackBonus   Int @default(0)
  magicDCBonus       Int @default(0)
  movementSpeedBonus Int @default(0)

  weapons   Weapon[]
  armors    Armor[]
  inventory InventoryItem[]
  wealth    Money[]

  age            Int
  weight         Int
  height         Int
  eyeColor       String
  hair           String
  skin           String
  physicalTraits String?
  imageUrl       String?

  alignment         Alignment
  personalityTraits String
  ideals            String
  bonds             String
  flaws             String

  lore   String?
  allies String?
  notes  String?
}

model InventoryItem {
  id          Int       @id @default(autoincrement())
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  name        String
  description String?
  quantity    Int       @default(1)
  value       String?
}

enum MoneyType {
  GOLD
  SILVER
  COPPER
}

model Money {
  id          Int       @id @default(autoincrement())
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  type        MoneyType
  quantity    Int

  @@unique([characterId, type])
}

enum PartyId {
  MIFA
  PAINTERS
}

model Party {
  id        Int        @id @default(autoincrement())
  name      PartyId
  campaigns Campaign[]
}

enum Abilities {
  STRENGTH
  DEXTERITY
  CONSTITUTION
  INTELLIGENCE
  WISDOM
  CHARISMA
}

model SavingThrow {
  id           Int       @id @default(autoincrement())
  ability      Abilities
  character    Character @relation(fields: [characterId], references: [id])
  characterId  Int
  isProficient Boolean   @default(false)
  modifier     Int       @default(0)

  @@unique([characterId, ability])
}

enum Skills {
  ACROBATICS
  ANIMAL_HANDLING
  ARCANA
  ATHLETICS
  DECEPTION
  HISTORY
  INSIGHT
  INTIMIDATION
  INVESTIGATION
  MEDICINE
  NATURE
  PERCEPTION
  PERFORMANCE
  PERSUASION
  RELIGION
  SLEIGHT_OF_HAND
  STEALTH
  SURVIVAL
}

model Skill {
  id           Int       @id @default(autoincrement())
  skill        Skills
  character    Character @relation(fields: [characterId], references: [id])
  characterId  Int
  isProficient Boolean   @default(false)
  isExpert     Boolean   @default(false)
  modifier     Int       @default(0)

  @@unique([characterId, skill])
}

enum SpellVersion {
  V2014
  V2024
}

model Spell {
  id                 String
  version            SpellVersion         @default(V2014)
  name               String
  level              Int
  isRitual           Boolean              @default(false)
  spellsOnCharacters SpellsOnCharacters[]

  @@id([id, version])
}

model SpellsOnCharacters {
  character    Character    @relation(fields: [characterId], references: [id])
  characterId  Int
  spell        Spell        @relation(fields: [spellId, spellVersion], references: [id, version])
  spellId      String
  spellVersion SpellVersion @default(V2014)
  isFavorite   Boolean      @default(false)

  @@id([spellId, spellVersion, characterId])
}

enum WeaponDamageType {
  BLUDGEONING
  SLASHING
  PIERCING
  ACID
  COLD
  FIRE
  FORCE
  LIGHTNING
  NECROTIC
  POISON
  PSYCHIC
  RADIANT
}

enum WeaponDamageDices {
  D4
  D6
  D8
  D10
  D12
}

enum WeaponType {
  RANGED
  MELEE
  THROWN
}

enum AmmunitionType {
  BOLT
  ARROW
  FIREARM_BULLET
  SLING_BULLET
  NEEDLES
}

model WeaponDamage {
  id            Int               @id @default(autoincrement())
  weapon        Weapon            @relation(fields: [weaponId], references: [id], onDelete: Cascade)
  weaponId      Int
  isBaseDamage  Boolean           @default(false)
  dice          WeaponDamageDices
  numberOfDices Int               @default(1)
  flatBonus     Int?
  type          WeaponDamageType
}

model Weapon {
  id              Int             @id @default(autoincrement())
  character       Character       @relation(fields: [characterId], references: [id])
  characterId     Int
  name            String
  type            WeaponType
  isProficient    Boolean         @default(true)
  abilityModifier Abilities
  attackBonus     Int             @default(0)
  damages         WeaponDamage[]
  reach           Int?
  range           Int?
  longRange       Int?
  ammunitionType  AmmunitionType?
  ammunitionCount Int?
  extraEffects    String?
}
